"""Logger con Tiempo de Ejecuci√≥n
Imagina que est√°s desarrollando un sistema complejo que incluye m√∫ltiples
funciones cr√≠ticas. Para asegurarte de que todo funcione correctamente y para
realizar un seguimiento del tiempo de ejecuci√≥n de estas funciones, decides
implementar un decorador de registro (logger) con tiempo de ejecuci√≥n.
El decorador deber√≠a realizar las siguientes acciones:
1. Antes de llamar a la funci√≥n original (puedes incluir cualquier funci√≥n),
debe imprimir un mensaje indicando que la funci√≥n est√° a punto de
ejecutarse.
2. Despu√©s de que la funci√≥n se haya ejecutado, debe imprimir un mensaje
que incluya el tiempo que tard√≥ la funci√≥n en ejecutarse.
3. Si la funci√≥n original arroja una excepci√≥n, el decorador debe manejarla e
imprimir un mensaje adecuado, indicando que se ha producido una
excepci√≥n.
A continuacion un ejemplo de una posible entrada y salida de la solucion:
Entrada Salida
-
- Invocando a la funci√≥n 'mi_funcion'...
- La funci√≥n 'mi_funcion' ha tardado
0.0012459754943847656 segundos en
ejecutarse.
- Resultados de la funcion: [0, 1, 1, 2, 3, 5,
8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
1597, 2584, 4181]"""

import time

def decorador_con_args(func):
    #Antes de llamar a la funci√≥n original (puedes incluir cualquier funci√≥n), debe 
    # imprimir un mensaje indicando que la funci√≥n est√° a punto de ejecutarse.
    def nueva_funcion(*args, **kwargs):
        print(f"üì¶ Esta funcion esta apunto de ejecutarse")
        inicio=time.time()
        inicio = time.time()
        try:
            resultado = func(*args, **kwargs)
            print(f"‚úÖ Resultado de la funci√≥n: {resultado}") 
        except Exception as e:
            print(f"‚ö†Ô∏è ¬°Ha ocurrido un error al ejecutar '{func.__name__}'!")
            print(f"üìå Tipo de error: {type(e).__name__}")
            print(f"üìå Detalle: {e}")
            resultado = None          #raise #si queremos q interrumpa la ejecucion normal
        
        fin=time.time()
        tiempo_ejecicion=fin-inicio
        print(f"La funcion se ha ejecutado en {tiempo_ejecicion :.10f} segundos")

        return resultado
    return nueva_funcion

@decorador_con_args
def sumar(a, b):
    return a + b

@decorador_con_args
def multiplicar(x, y):
    return x * y

@decorador_con_args
def filtrar_nombres(nombres_ordenados):
  #filtra los nombres q tengan mas de 5 letras y mas o igual de tres vocales
  nombres_filtrados= []

  for palabra in nombres_ordenados:
        partes = palabra.split()            # ['Laura', 'Garc√≠a']
        nombre = ' '.join(partes[:-1])  # todo menos el √∫ltimo ‚Üí 'Laura' y reconstruye por si fuera compuesto
        vocales= "aeiou√°√©√≠√≥√∫AEIOU√Å√â√ç√ì√ö"
        num_vocales = sum(1 for letra in nombre if letra in vocales)     
        if len(nombre) > 5 and num_vocales >=3:
            nombres_filtrados.append(palabra)
  return nombres_filtrados


if __name__ == "__main__":

    nombres_ordenados =['Laura Garc√≠a', 'Javier Moreno', 'Luc√≠a Ram√≠rez', 'Sergio Ortega', 'Elena Delgado', 'Miguel Navarro']

ejemplo1=sumar("hola",2100)

ejemplo2=multiplicar(0.00001, 0.023)

ejemplo3=filtrar_nombres(nombres_ordenados)